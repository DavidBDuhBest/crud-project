"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMultipleSelection = useMultipleSelection;

var _shared = require("@clayui/shared");

var _react = require("react");

var _collection = require("../collection");

var _useTree = require("./useTree");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * The selection hook implementation handles the responsibility of optimizing
 * the tree selection in more complex scenarios like multiple recursive
 * selection, recursively selecting in two directions from the point where the
 * item is in the tree.
 *
 * Root
 * ├─ Item 0
 * ├─ Item 1
 * │  ├─ Item 2 <- Select this item.
 * │  │  ├─ Item 3
 * │  │  ├─ Item 4
 * │  ├─ Item 5
 *
 * Selecting the item must recursively navigate up and down from the item's
 * point in the tree to the end at each end, the selection rules are different
 * when navigating up and down.
 *
 * {
 *  'Item 1': {
 *    children: ['Item 2', 'Item 5'],
 *    parentKey: 'Root'
 *  }
 * }
 *
 * Navigation in the tree is supported by a hashmap structure with linked list
 * that avoids the operation of traversing the tree in search of all parent and
 * childs items. Navigation done this way lets you go from 1 to 1.
 *
 * Assembling the `layoutKeys` structure is also optimized to avoid traversing
 * the entire tree and blocking rendering until the operation is finished,
 * instead, the hook embodies the concept of building the structure in
 * React flow, i.e. when the item component is rendered, the record is added
 * to `layoutKeys` and and keeping the structure up to date is free because the
 * method is called on component mount and unmount. The trade-off is that we
 * don't get the complete mirror of the tree in the hashmap but only what is
 * rendered, this decreases the amount of data when there is a big tree but we
 * have problems recursively selecting to down.
 *
 * Root [0]
 * ├─ Item 0 [0, 0]
 * ├─ Item 1 [0, 1]
 * │  ├─ Item 2 [0, 1, 0]
 * │  │  ├─ Item 3 [0, 1, 0, 0]
 * │  │  ├─ Item 4 [0, 1, 0, 1]
 * │  ├─ Item 5 [0, 1, 1]
 *
 * The implementation solves this with a fallback approach of identifying if
 * the item has unrendered children and using the tree to navigate but using
 * the item path to avoid traversing the entire tree.
 */
function useMultipleSelection(props) {
  var _props$defaultSelecte;

  var selectionMode = props.selectionMode;
  var layoutKeys = (0, _react.useRef)(new Map());
  var intermediateKeys = (0, _react.useRef)(new Set());

  var _useInternalState = (0, _shared.useInternalState)({
    defaultName: 'defaultSelectedKeys',
    defaultValue: (_props$defaultSelecte = props.defaultSelectedKeys) !== null && _props$defaultSelecte !== void 0 ? _props$defaultSelecte : new Set(),
    handleName: 'onSelectionChange',
    name: 'selectedKeys',
    onChange: props.onSelectionChange,
    value: props.selectedKeys
  }),
      _useInternalState2 = _slicedToArray(_useInternalState, 3),
      selectedKeys = _useInternalState2[0],
      setSelectionKeys = _useInternalState2[1],
      isUncontrolled = _useInternalState2[2];
  /**
   * We are using `useMemo` to do intermediate state revalidation in the
   * render cycle instead of in the `useEffect` which happens after rendering.
   */


  (0, _react.useMemo)(function () {
    if (props.selectionMode === 'multiple-recursive' && !isUncontrolled) {
      var intermediates = Array.from(intermediateKeys.current);
      intermediateKeys.current = new Set(intermediates.filter(function (key) {
        var keyMap = layoutKeys.current.get(key);

        var children = _toConsumableArray(keyMap.children);

        var unselected = children.some(function (key) {
          return !selectedKeys.has(key);
        });

        if (unselected) {
          if (children.some(function (key) {
            return selectedKeys.has(key) || intermediateKeys.current.has(key);
          })) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }));
    }
  }, [selectedKeys]);
  /**
   * The method creates the mirror of the tree in a hashmap structure with a
   * linked list using `parentKey` and `children`. Adding data to the structure
   * is reactive to item component rendering and disassembly. Only the rendered
   * items are in the structure, if a component is moved, removed, or added the
   * structure is updated automatically.
   *
   * useEffect(() => createPartialLayoutItem(...), []);
   *
   * The design of this method is to be coupled to `useEffect` which has the
   * mount and unmount behavior, also handles lifecycle and call order,
   * `useEffect` in nested components are called bottom-up instead of top-down
   * as in rendering.
   */

  var createPartialLayoutItem = (0, _react.useCallback)(function (key, lazyChild, loc, parentKey) {
    var keyMap = layoutKeys.current.get(key);

    if (!keyMap) {
      layoutKeys.current.set(key, {
        children: new Set(),
        lazyChild: lazyChild,
        loc: loc,
        parentKey: parentKey
      });
    } else if (keyMap.parentKey !== parentKey) {
      layoutKeys.current.set(key, _objectSpread(_objectSpread({}, keyMap), {}, {
        parentKey: parentKey
      }));
    }

    if (parentKey) {
      var _keyMap = layoutKeys.current.get(parentKey);

      if (_keyMap) {
        layoutKeys.current.set(parentKey, _objectSpread(_objectSpread({}, _keyMap), {}, {
          children: new Set([].concat(_toConsumableArray(_keyMap.children), [key])),
          lazyChild: false
        }));
      } else {
        // Pre-initializes the parent layout, as this is linked to
        // React rendering, the mount is used inside `useEffect`
        // this causes callbacks from the last rendering to be
        // called first than parents, starting from the bottom up.
        //
        // We just add an initial value then update the parentKey
        // when the corresponding one is called.
        layoutKeys.current.set(parentKey, {
          children: new Set([key]),
          lazyChild: false,
          loc: loc.slice(0, -1),
          parentKey: undefined
        });
      }
    }

    return function unmount() {
      layoutKeys.current.delete(key);

      if (parentKey && layoutKeys.current.has(parentKey)) {
        var _keyMap2 = layoutKeys.current.get(parentKey);

        var children = new Set(_keyMap2.children);
        children.delete(key);
        layoutKeys.current.set(parentKey, _objectSpread(_objectSpread({}, _keyMap2), {}, {
          children: children,
          lazyChild: children.size === 0
        }));
      }
    };
  }, [layoutKeys]);
  var toggleParentSelection = (0, _react.useCallback)(function (hasIntermediate, keyMap, selecteds) {
    if (!keyMap.parentKey) {
      return;
    }

    var parentKeyMap = layoutKeys.current.get(keyMap.parentKey); // Root
    // ├─ Item 0
    // ├─ Item 1 <- Current recursion flow
    // │  ├─ (Intermediate) Item 2
    // │  │  ├─ (Checked) Item 3 <- Start
    // │  │  ├─ Item 4
    //
    // As the method works recursively from the item's point in the tree
    // to up, if the item's parent was already marked as intermediate, from
    // here we start to mark all the parents as intermediate to avoid
    // unnecessary operations.

    if (hasIntermediate) {
      intermediateKeys.current.add(keyMap.parentKey);
      selecteds.delete(keyMap.parentKey);
    } else {
      var children = _toConsumableArray(parentKeyMap.children); // Instead of using `every` method to check if all items are
      // selected, we look for any not selected, which means we don't have
      // all the items selected and we don't always need to go through the
      // entire array.


      var unselected = children.some(function (key) {
        return !selecteds.has(key);
      });

      if (unselected) {
        // An item can only be intermediate when there is at least
        // one selected or intermediate item in its tree. We don't need
        // to sweep the tree because we have the recursive effect.
        if (children.some(function (key) {
          return selecteds.has(key) || intermediateKeys.current.has(key);
        })) {
          intermediateKeys.current.add(keyMap.parentKey);
        } else {
          intermediateKeys.current.delete(keyMap.parentKey);
        }

        selecteds.delete(keyMap.parentKey);
      } else {
        intermediateKeys.current.delete(keyMap.parentKey);
        selecteds.add(keyMap.parentKey);
      }
    }

    toggleParentSelection(intermediateKeys.current.has(keyMap.parentKey), parentKeyMap, selecteds);
  }, [layoutKeys, intermediateKeys]);
  var toggleLazyChildrenSelection = (0, _react.useCallback)(function (item, currentKey, selecteds, select) {
    var children = item[props.nestedKey];

    if (!children) {
      return;
    }

    children.forEach(function (item, index) {
      // TODO: The `key` property of the component that the developer
      // can set is not being considered.
      var key = (0, _collection.getKey)(index, item.id, currentKey);

      if (select) {
        selecteds.add(key);
      } else {
        selecteds.delete(key);
      }

      toggleLazyChildrenSelection(item, key, selecteds, select);
    });
  }, [props.nestedKey]);
  /**
   * The recursive selection of children of an item is done using the
   * `layoutKeys` structure which is the representation of the items rendered
   * in the DOM, when the child is not rendered in the DOM the method uses the
   * fallback of the tree to continue the recursion from where it left off.
   */

  var toggleChildrenSelection = (0, _react.useCallback)(function (keyMap, currentKey, selecteds, select) {
    if (keyMap.lazyChild) {
      var _props$items;

      var tree = (0, _useTree.createImmutableTree)((_props$items = props.items) !== null && _props$items !== void 0 ? _props$items : [], props.nestedKey);
      var node = tree.nodeByPath(keyMap.loc);
      return toggleLazyChildrenSelection(node.item, currentKey, selecteds, select);
    }

    if (!keyMap.children.size) {
      return;
    }

    keyMap.children.forEach(function (key) {
      if (select) {
        selecteds.add(key);
      } else {
        selecteds.delete(key);
      }

      var childrenKeyMap = layoutKeys.current.get(key);
      toggleChildrenSelection(childrenKeyMap, key, selecteds, select);
    });
  }, [toggleLazyChildrenSelection, layoutKeys, props.items, props.nestedKey]);
  var toggleSelection = (0, _react.useCallback)(function (key) {
    switch (selectionMode) {
      case 'multiple':
        {
          var selecteds = new Set(selectedKeys);

          if (selecteds.has(key)) {
            selecteds.delete(key);
          } else {
            selecteds.add(key);
          }

          setSelectionKeys(selecteds);
          break;
        }

      case 'multiple-recursive':
        {
          var _selecteds = new Set(selectedKeys);

          var keyMap = layoutKeys.current.get(key);

          if (_selecteds.has(key)) {
            _selecteds.delete(key);
          } else if (!intermediateKeys.current.has(key)) {
            _selecteds.add(key);
          } // Resets the intermediate state because its selected state
          // will change.


          intermediateKeys.current.delete(key);
          toggleChildrenSelection(keyMap, key, _selecteds, _selecteds.has(key));
          toggleParentSelection(false, keyMap, _selecteds);
          setSelectionKeys(_selecteds);
          break;
        }

      default:
        {
          if (selectedKeys.has(key)) {
            setSelectionKeys(new Set());
          } else {
            setSelectionKeys(new Set([key]));
          }

          break;
        }
    }
  }, [layoutKeys, intermediateKeys, selectedKeys, selectionMode, toggleChildrenSelection, toggleParentSelection]);
  var isIntermediate = (0, _react.useCallback)(function (key) {
    return intermediateKeys.current.has(key);
  }, [intermediateKeys]);
  var replaceIntermediateKeys = (0, _react.useCallback)(function (keys) {
    intermediateKeys.current = new Set(keys);
  }, [intermediateKeys]);
  return {
    createPartialLayoutItem: createPartialLayoutItem,
    isIntermediate: isIntermediate,
    replaceIntermediateKeys: replaceIntermediateKeys,
    selectedKeys: selectedKeys,
    toggleSelection: toggleSelection
  };
}