{"version":3,"sources":["../src/index.ts"],"names":["props","rectChanged","a","b","observedNodes","run","changedStates","newRect","node","state","cb","rafId","window","observeRect","wasEmpty","rect","hasRectChanged","callbacks","index","cancelAnimationFrame"],"mappings":";;;;AAAA,QAAIA,QAA2B,CAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAA/B,OAA+B,CAA/B;;AASA,QAAIC,cAAc,SAAdA,WAAc,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,UAAA,MAAA,KAAA,CAAA,EAAA;AAAA,YAAA,EAAA;AAAA;;AAAA,UAAA,MAAA,KAAA,CAAA,EAAA;AAAA,YAAA,EAAA;AAAA;;AAAA,aACjB,MAAA,IAAA,CAAW,UAAA,IAAA,EAAA;AAAA,eAAUC,EAAAA,IAAAA,MAAYC,EAAtB,IAAsBA,CAAtB;AADM,OACjB,CADiB;AAAlB,KAAA;;AAGA,QAAIC,gBAAa,aAAG,IAApB,GAAoB,EAApB;AACA,QAAA,KAAA;;AAEA,QAAIC,MAAM,SAANA,GAAM,GAAA;AACT,UAAMC,gBAAN,EAAA;AACAF,oBAAAA,OAAAA,CAAsB,UAAA,KAAA,EAAA,IAAA,EAAA;AACrB,YAAIG,UAAUC,KAAd,qBAAcA,EAAd;;AACA,YAAIP,YAAW,OAAXA,EAAqBQ,MAAzB,IAAIR,CAAJ,EAAsC;AACrCQ,gBAAAA,IAAAA,GAAAA,OAAAA;AACAH,wBAAAA,IAAAA,CAAAA,KAAAA;AACA;AALFF,OAAAA;AAQAE,oBAAAA,OAAAA,CAAsB,UAAA,KAAA,EAAA;AACrBG,cAAAA,SAAAA,CAAAA,OAAAA,CAAwB,UAAA,EAAA,EAAA;AAAA,iBAAQC,GAAGD,MAAX,IAAQC,CAAR;AAAxBD,SAAAA;AADDH,OAAAA;AAIAK,cAAQC,OAAAA,qBAAAA,CAARD,GAAQC,CAARD;AAdD,KAAA;;aAiBwBE,W,CACvBL,I,EACAE,E,EAAAA;AAEA,aAAO;AAAA,iBAAA,SAAA,OAAA,GAAA;AAEL,cAAII,WAAWV,cAAAA,IAAAA,KAAf,CAAA;;AACA,cAAIA,cAAAA,GAAAA,CAAJ,IAAIA,CAAJ,EAA6B;AAC5BA,0BAAAA,GAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,CAAAA,EAAAA;AADD,WAAA,MAEO;AACNA,0BAAAA,GAAAA,CAAAA,IAAAA,EAAwB;AACvBW,oBADuB,SAAA;AAEvBC,8BAFuB,KAAA;AAGvBC,yBAAW,CAAA,EAAA;AAHY,aAAxBb;AAKA;;AACD,cAAA,QAAA,EAAcC;AAZT,SAAA;AAAA,mBAAA,SAAA,SAAA,GAAA;AAgBL,cAAII,QAAQL,cAAAA,GAAAA,CAAZ,IAAYA,CAAZ;;AACA,cAAA,KAAA,EAAW;AACV;AACA,gBAAMc,QAAQT,MAAAA,SAAAA,CAAAA,OAAAA,CAAd,EAAcA,CAAd;AACA,gBAAIS,SAAJ,CAAA,EAAgBT,MAAAA,SAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAHN,CAGMA,EAHN,CAAA;;AAMV,gBAAI,CAACA,MAAAA,SAAAA,CAAL,MAAA,EAA6BL,cAAAA,QAAAA,EANnB,IAMmBA,EANnB,CAAA;;AASV,gBAAI,CAACA,cAAL,IAAA,EAAyBe,qBAAAA,KAAAA;AACzB;AACD;AA5BK,OAAP;AA8BA","sourcesContent":["let props: (keyof DOMRect)[] = [\n\t\"bottom\",\n\t\"height\",\n\t\"left\",\n\t\"right\",\n\t\"top\",\n\t\"width\",\n];\n\nlet rectChanged = (a: DOMRect = {} as DOMRect, b: DOMRect = {} as DOMRect) =>\n\tprops.some((prop) => a[prop] !== b[prop]);\n\nlet observedNodes = new Map<Element, RectProps>();\nlet rafId: number;\n\nlet run = () => {\n\tconst changedStates: RectProps[] = [];\n\tobservedNodes.forEach((state, node) => {\n\t\tlet newRect = node.getBoundingClientRect();\n\t\tif (rectChanged(newRect, state.rect)) {\n\t\t\tstate.rect = newRect;\n\t\t\tchangedStates.push(state);\n\t\t}\n\t});\n\n\tchangedStates.forEach((state) => {\n\t\tstate.callbacks.forEach((cb) => cb(state.rect));\n\t});\n\n\trafId = window.requestAnimationFrame(run);\n};\n\nexport default function observeRect(\n\tnode: Element,\n\tcb: (rect: DOMRect) => void\n) {\n\treturn {\n\t\tobserve() {\n\t\t\tlet wasEmpty = observedNodes.size === 0;\n\t\t\tif (observedNodes.has(node)) {\n\t\t\t\tobservedNodes.get(node)!.callbacks.push(cb);\n\t\t\t} else {\n\t\t\t\tobservedNodes.set(node, {\n\t\t\t\t\trect: undefined,\n\t\t\t\t\thasRectChanged: false,\n\t\t\t\t\tcallbacks: [cb],\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (wasEmpty) run();\n\t\t},\n\n\t\tunobserve() {\n\t\t\tlet state = observedNodes.get(node);\n\t\t\tif (state) {\n\t\t\t\t// Remove the callback\n\t\t\t\tconst index = state.callbacks.indexOf(cb);\n\t\t\t\tif (index >= 0) state.callbacks.splice(index, 1);\n\n\t\t\t\t// Remove the node reference\n\t\t\t\tif (!state.callbacks.length) observedNodes.delete(node);\n\n\t\t\t\t// Stop the loop\n\t\t\t\tif (!observedNodes.size) cancelAnimationFrame(rafId);\n\t\t\t}\n\t\t},\n\t};\n}\n\nexport type PartialRect = Partial<DOMRect>;\n\nexport type RectProps = {\n\trect: DOMRect | undefined;\n\thasRectChanged: boolean;\n\tcallbacks: Function[];\n};\n"]}