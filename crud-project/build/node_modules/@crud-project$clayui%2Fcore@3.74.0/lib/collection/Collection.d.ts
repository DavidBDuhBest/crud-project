/**
 * SPDX-FileCopyrightText: Â© 2022 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
export declare type ChildrenFunction<T, P> = P extends Array<unknown> ? (item: T, ...args: P) => React.ReactElement : (item: T) => React.ReactElement;
export interface ICollectionProps<T, P> {
    /**
     * Children content to render a dynamic or static content.
     */
    children: React.ReactNode | ChildrenFunction<T, P>;
    /**
     * Property to render content with dynamic data.
     */
    items?: Array<T>;
    /**
     * Flag to indicate whether the list should be virtualized.
     */
    virtualize?: boolean;
}
interface IProps<P, K> {
    /**
     * Component to render.
     */
    as?: 'div' | React.ComponentType | React.ForwardRefExoticComponent<any>;
    /**
     * Flag to estimate the default height of a list item in pixels.
     */
    estimateSize?: number;
    /**
     * Properties that should be omitted from item data when passed to
     * children function.
     */
    exclude?: Set<K>;
    /**
     * Add the reference of the parent element that will be used to define the
     * scroll and get the height of the element for virtualization of the
     * collection.
     */
    parentRef: React.RefObject<HTMLElement>;
    /**
     * Set for the parent's key to create the unique key of the list items, if
     * the collection is rendered nested.
     */
    parentKey?: React.Key;
    /**
     * Defines the public APIs that are passed in the children function when
     * it is a dynamic collection.
     */
    publicApi?: P;
    /**
     * Defines a component that will be used as a wrapper for items in the
     * collection if defined.
     */
    itemContainer?: React.ComponentType<Record<string, any>>;
}
/**
 * Helper function to create a unique key for list or tree when defined by
 * developer data or obtained by component in React.
 */
export declare function getKey(index: number, key?: React.Key | null, parentKey?: React.Key): React.Key;
/**
 * Helper function for omitting properties of an object, similar to
 * TypeScript's Omit<T, K>.
 */
export declare function excludeProps<T extends Record<string, any>, K extends keyof T>(props: T, items: Set<K>): T;
export declare function Collection<T extends Record<any, any>, P = unknown, K = unknown>({ as, children, estimateSize, exclude, itemContainer: ItemContainer, items, parentKey, parentRef, publicApi, virtualize, }: ICollectionProps<T, P> & Partial<IProps<P, K>>): JSX.Element;
export {};
