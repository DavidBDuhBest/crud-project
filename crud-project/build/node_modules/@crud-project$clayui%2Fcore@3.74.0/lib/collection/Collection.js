"use strict";

Liferay.Loader.define("@crud-project$clayui/core@3.74.0/lib/collection/Collection", ['module', 'exports', 'require', '@crud-project$tanstack/react-virtual', 'crud-project$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Collection = Collection;
    exports.excludeProps = excludeProps;
    exports.getKey = getKey;

    var _reactVirtual = require("@crud-project$tanstack/react-virtual");

    var _react = _interopRequireDefault(require("crud-project$react"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }return arr2;
    }

    /**
     * Helper function to create a unique key for list or tree when defined by
     * developer data or obtained by component in React.
     */
    function getKey(index, key, parentKey) {
      if (key != null && (!String(key).startsWith('.') || String(key).startsWith('.$'))) {
        return key;
      }

      return parentKey ? "".concat(parentKey, ".").concat(index) : "$.".concat(index);
    }
    /**
     * Helper function for omitting properties of an object, similar to
     * TypeScript's Omit<T, K>.
     */

    function excludeProps(props, items) {
      return Object.keys(props).reduce(function (previous, key) {
        if (!items.has(key)) {
          previous[key] = props[key];
        }

        return previous;
      }, {});
    }

    function VirtualDynamicCollection(_ref) {
      var _ref$as = _ref.as,
          Container = _ref$as === void 0 ? 'div' : _ref$as,
          children = _ref.children,
          _ref$estimateSize = _ref.estimateSize,
          _estimateSize = _ref$estimateSize === void 0 ? 37 : _ref$estimateSize,
          exclude = _ref.exclude,
          items = _ref.items,
          parentKey = _ref.parentKey,
          parentRef = _ref.parentRef,
          publicApi = _ref.publicApi;

      var virtualizer = (0, _reactVirtual.useVirtualizer)({
        count: items.length,
        estimateSize: function estimateSize() {
          return _estimateSize;
        },
        getScrollElement: function getScrollElement() {
          return parentRef.current;
        }
      });
      return (/*#__PURE__*/_react.default.createElement(Container, {
          style: {
            height: virtualizer.getTotalSize(),
            position: 'relative',
            width: '100%'
          }
        }, virtualizer.getVirtualItems().map(function (virtual) {
          var _item$id;

          var item = items[virtual.index];
          var publicItem = exclude ? excludeProps(item, exclude) : item;
          var child = Array.isArray(publicApi) ? children.apply(void 0, [publicItem].concat(_toConsumableArray(publicApi))) : children(publicItem);
          var key = getKey(virtual.index, (_item$id = item.id) !== null && _item$id !== void 0 ? _item$id : child.key, parentKey);
          return (/*#__PURE__*/_react.default.cloneElement(child, {
              key: key,
              keyValue: key,
              ref: function ref(node) {
                virtual.measureElement(node);

                if (typeof child.ref === 'function') {
                  child.ref(node);
                }
              },
              style: {
                left: 0,
                position: 'absolute',
                top: 0,
                transform: "translateY(".concat(virtual.start, "px)"),
                width: '100%'
              }
            })
          );
        }))
      );
    }

    function Collection(_ref2) {
      var as = _ref2.as,
          children = _ref2.children,
          estimateSize = _ref2.estimateSize,
          exclude = _ref2.exclude,
          ItemContainer = _ref2.itemContainer,
          items = _ref2.items,
          parentKey = _ref2.parentKey,
          parentRef = _ref2.parentRef,
          publicApi = _ref2.publicApi,
          _ref2$virtualize = _ref2.virtualize,
          virtualize = _ref2$virtualize === void 0 ? false : _ref2$virtualize;

      if (virtualize && children instanceof Function && items && parentRef) {
        return (/*#__PURE__*/_react.default.createElement(VirtualDynamicCollection, {
            as: as,
            estimateSize: estimateSize,
            items: items,
            parentKey: parentKey,
            parentRef: parentRef,
            publicApi: publicApi
          }, children)
        );
      }

      var Container = as !== null && as !== void 0 ? as : _react.default.Fragment;
      return (/*#__PURE__*/_react.default.createElement(Container, null, children instanceof Function && items ? items.map(function (item, index) {
          var _item$id2;

          var publicItem = exclude ? excludeProps(item, exclude) : item;
          var child = Array.isArray(publicApi) ? children.apply(void 0, [publicItem].concat(_toConsumableArray(publicApi))) : children(publicItem);
          var key = getKey(index, (_item$id2 = item.id) !== null && _item$id2 !== void 0 ? _item$id2 : child.key, parentKey);

          if (ItemContainer) {
            return (/*#__PURE__*/_react.default.createElement(ItemContainer, {
                index: index,
                item: item,
                key: key,
                keyValue: key
              }, child)
            );
          }

          return (/*#__PURE__*/_react.default.cloneElement(child, {
              key: key,
              keyValue: key
            })
          );
        }) : _react.default.Children.map(children, function (child, index) {
          if (! /*#__PURE__*/_react.default.isValidElement(child)) {
            return null;
          }

          var key = getKey(index, child.key, parentKey);

          if (ItemContainer) {
            return (/*#__PURE__*/_react.default.createElement(ItemContainer, {
                index: index,
                key: key,
                keyValue: key
              }, child)
            );
          }

          return (/*#__PURE__*/_react.default.cloneElement(child, {
              key: key,
              keyValue: key
            })
          );
        }))
      );
    }
  }
});
//# sourceMappingURL=Collection.js.map