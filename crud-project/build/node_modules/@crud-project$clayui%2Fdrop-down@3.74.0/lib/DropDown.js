"use strict";

Liferay.Loader.define("@crud-project$clayui/drop-down@3.74.0/lib/DropDown", ['module', 'exports', 'require', '@crud-project$clayui/shared', 'crud-project$aria-hidden', 'crud-project$classnames', 'crud-project$react', './Action', './Caption', './Divider', './DropDownContext', './Group', './Help', './Item', './ItemList', './Menu', './Search', './Section'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Align", {
      enumerable: true,
      get: function get() {
        return _Menu.Align;
      }
    });
    exports.default = void 0;

    var _shared = require("@crud-project$clayui/shared");

    var _ariaHidden = require("crud-project$aria-hidden");

    var _classnames = _interopRequireDefault(require("crud-project$classnames"));

    var _react = _interopRequireWildcard(require("crud-project$react"));

    var _Action = _interopRequireDefault(require("./Action"));

    var _Caption = _interopRequireDefault(require("./Caption"));

    var _Divider = _interopRequireDefault(require("./Divider"));

    var _DropDownContext = require("./DropDownContext");

    var _Group = _interopRequireDefault(require("./Group"));

    var _Help = _interopRequireDefault(require("./Help"));

    var _Item = _interopRequireDefault(require("./Item"));

    var _ItemList = _interopRequireDefault(require("./ItemList"));

    var _Menu = _interopRequireWildcard(require("./Menu"));

    var _Search = _interopRequireDefault(require("./Search"));

    var _Section = _interopRequireDefault(require("./Section"));

    var _excluded = ["active", "alignmentByViewport", "alignmentPosition", "children", "className", "closeOnClick", "closeOnClickOutside", "containerElement", "defaultActive", "hasLeftSymbols", "hasRightSymbols", "menuElementAttrs", "menuHeight", "menuWidth", "offsetFn", "onActiveChange", "renderMenuOnClick", "trigger"];

    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }

    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return { default: obj };
      }var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {
        return cache.get(obj);
      }var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }newObj.default = obj;if (cache) {
        cache.set(obj, newObj);
      }return newObj;
    }

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }return target;
      };return _extends.apply(this, arguments);
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};var target = _objectWithoutPropertiesLoose(source, excluded);var key, i;if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];if (excluded.indexOf(key) >= 0) continue;if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;target[key] = source[key];
        }
      }return target;
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};var target = {};var sourceKeys = Object.keys(source);var key, i;for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];if (excluded.indexOf(key) >= 0) continue;target[key] = source[key];
      }return target;
    }

    var counter = 0;

    function ClayDropDown(_ref) {
      var active = _ref.active,
          alignmentByViewport = _ref.alignmentByViewport,
          alignmentPosition = _ref.alignmentPosition,
          children = _ref.children,
          className = _ref.className,
          _ref$closeOnClick = _ref.closeOnClick,
          closeOnClick = _ref$closeOnClick === void 0 ? false : _ref$closeOnClick,
          closeOnClickOutside = _ref.closeOnClickOutside,
          _ref$containerElement = _ref.containerElement,
          ContainerElement = _ref$containerElement === void 0 ? 'div' : _ref$containerElement,
          _ref$defaultActive = _ref.defaultActive,
          defaultActive = _ref$defaultActive === void 0 ? false : _ref$defaultActive,
          hasLeftSymbols = _ref.hasLeftSymbols,
          hasRightSymbols = _ref.hasRightSymbols,
          menuElementAttrs = _ref.menuElementAttrs,
          menuHeight = _ref.menuHeight,
          menuWidth = _ref.menuWidth,
          offsetFn = _ref.offsetFn,
          onActiveChange = _ref.onActiveChange,
          _ref$renderMenuOnClic = _ref.renderMenuOnClick,
          renderMenuOnClick = _ref$renderMenuOnClic === void 0 ? false : _ref$renderMenuOnClic,
          trigger = _ref.trigger,
          otherProps = _objectWithoutProperties(_ref, _excluded);

      var triggerElementRef = (0, _react.useRef)(null);
      var menuElementRef = (0, _react.useRef)(null);

      var _useState = (0, _react.useState)(!renderMenuOnClick),
          _useState2 = _slicedToArray(_useState, 2),
          initialized = _useState2[0],
          setInitialized = _useState2[1];

      var _useInternalState = (0, _shared.useInternalState)({
        defaultName: 'defaultActive',
        defaultValue: defaultActive,
        handleName: 'onActiveChange',
        name: 'active',
        onChange: onActiveChange,
        value: active
      }),
          _useInternalState2 = _slicedToArray(_useInternalState, 2),
          internalActive = _useInternalState2[0],
          setInternalActive = _useInternalState2[1];

      (0, _react.useEffect)(function () {
        if (internalActive) {
          var onFocus = function onFocus(event) {
            var _menuElementRef$curre, _menuElementRef$curre2, _triggerElementRef$cu;

            if (!((_menuElementRef$curre = menuElementRef.current) !== null && _menuElementRef$curre !== void 0 && (_menuElementRef$curre2 = _menuElementRef$curre.parentElement) !== null && _menuElementRef$curre2 !== void 0 && _menuElementRef$curre2.contains(event.target)) && !((_triggerElementRef$cu = triggerElementRef.current) !== null && _triggerElementRef$cu !== void 0 && _triggerElementRef$cu.contains(event.target))) {
              setInternalActive(false);
            }
          };

          document.addEventListener('focus', onFocus, true);
          return function () {
            document.removeEventListener('focus', onFocus, true);
          };
        }
      }, [internalActive]);
      (0, _react.useEffect)(function () {
        if (menuElementRef.current && initialized && internalActive) {
          // Hide everything from ARIA except the MenuElement
          return (0, _ariaHidden.hideOthers)(menuElementRef.current);
        }
      }, [initialized, internalActive]);
      var ariaControls = (0, _react.useMemo)(function () {
        counter++;
        return "clay-dropdown-menu-".concat(counter);
      }, []);
      var openMenu = (0, _react.useCallback)(function (value) {
        if (!initialized) {
          setInitialized(true);
        }

        setInternalActive(value);
      }, [initialized]);
      return (/*#__PURE__*/_react.default.createElement(_shared.FocusScope, null, /*#__PURE__*/_react.default.createElement(ContainerElement, _extends({}, otherProps, {
          className: (0, _classnames.default)('dropdown', className),
          onKeyUp: function handleKeyUp(event) {
            if (event.key === _shared.Keys.Esc) {
              setInternalActive(!internalActive);
            }
          }
        }), /*#__PURE__*/_react.default.cloneElement(trigger, {
          'aria-controls': ariaControls,
          'aria-expanded': internalActive,
          'aria-haspopup': 'true',
          className: (0, _classnames.default)('dropdown-toggle', trigger.props.className),
          onClick: function onClick(event) {
            if (trigger.props.onClick) {
              trigger.props.onClick(event);
            }

            openMenu(!internalActive);
          },
          onKeyDown: function onKeyDown(event) {
            if (trigger.props.onKeyDown) {
              trigger.props.onKeyDown(event);
            }

            if (event.key === _shared.Keys.Spacebar) {
              openMenu(!internalActive);
            }

            if (event.key === _shared.Keys.Down) {
              event.preventDefault();
              event.stopPropagation();
              openMenu(true);
            }

            if ([_shared.Keys.Spacebar, _shared.Keys.Down].includes(event.key)) {
              event.preventDefault();
            }
          },
          ref: function ref(node) {
            if (node) {
              triggerElementRef.current = node; // Call the original ref, if any.

              var ref = trigger.ref;

              if (typeof ref === 'function') {
                ref(node);
              }
            }
          }
        }), initialized && /*#__PURE__*/_react.default.createElement(_Menu.default, _extends({}, menuElementAttrs, {
          active: internalActive,
          alignElementRef: triggerElementRef,
          alignmentByViewport: alignmentByViewport,
          alignmentPosition: alignmentPosition,
          closeOnClickOutside: closeOnClickOutside,
          hasLeftSymbols: hasLeftSymbols,
          hasRightSymbols: hasRightSymbols,
          height: menuHeight,
          id: ariaControls,
          offsetFn: offsetFn,
          onSetActive: setInternalActive,
          ref: menuElementRef,
          width: menuWidth
        }), /*#__PURE__*/_react.default.createElement(FocusMenu, {
          condition: internalActive,
          onRender: function onRender() {
            // After a few milliseconds querying the elements in the DOM
            // inside the menu. This especially when the menu is not
            // rendered yet only after the menu is opened, React needs
            // to commit the changes to the DOM so that the elements are
            // visible and we can move the focus.
            setTimeout(function () {
              var _menuElementRef$curre3;

              var first = (_menuElementRef$curre3 = menuElementRef.current) === null || _menuElementRef$curre3 === void 0 ? void 0 : _menuElementRef$curre3.querySelector( // @ts-ignore
              _shared.FOCUSABLE_ELEMENTS);

              if (first) {
                first.focus();
              }
            }, 10);
          }
        }, /*#__PURE__*/_react.default.createElement(_DropDownContext.DropDownContext.Provider, {
          value: {
            close: function close() {
              var _triggerElementRef$cu2;

              setInternalActive(false);
              (_triggerElementRef$cu2 = triggerElementRef.current) === null || _triggerElementRef$cu2 === void 0 ? void 0 : _triggerElementRef$cu2.focus();
            },
            closeOnClick: closeOnClick
          }
        }, children)))))
      );
    }

    function FocusMenu(_ref2) {
      var children = _ref2.children,
          condition = _ref2.condition,
          onRender = _ref2.onRender;
      (0, _react.useEffect)(function () {
        if (condition) {
          onRender();
        }
      }, [condition]);
      return children;
    }

    ClayDropDown.Action = _Action.default;
    ClayDropDown.Caption = _Caption.default;
    ClayDropDown.Divider = _Divider.default;
    ClayDropDown.Group = _Group.default;
    ClayDropDown.Help = _Help.default;
    ClayDropDown.Menu = _Menu.default;
    ClayDropDown.Item = _Item.default;
    ClayDropDown.ItemList = _ItemList.default;
    ClayDropDown.Search = _Search.default;
    ClayDropDown.Section = _Section.default;
    var _default = ClayDropDown;
    exports.default = _default;
  }
});
//# sourceMappingURL=DropDown.js.map