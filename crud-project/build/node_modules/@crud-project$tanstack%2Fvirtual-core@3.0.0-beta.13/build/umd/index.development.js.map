{"version":3,"sources":["../../../../node_modules/@reach/observe-rect/dist/observe-rect.esm.js","../../src/utils.ts","../../src/index.ts"],"names":["deps","opts","depTime","Date","newDeps","depsChanged","resultTime","result","fn","depEndTime","Math","resultEndTime","pad","str","String","console","defaultKeyExtractor","defaultRangeExtractor","start","range","end","arr","i","memoRectCallback","prev","height","width","instance","rect","cb","onResize","observer","observeRect","memoizedCallback","innerHeight","capture","passive","scrollProps","element","window","createOffsetObserver","propX","propY","prevX","prevY","scroll","onScroll","target","e","scrollX","scrollY","observeElementOffset","observeWindowOffset","measureElement","behavior","canSmooth","undefined","unsubs","scrollElement","measurementsCache","itemMeasurementsCache","pendingMeasuredCacheIndexes","measureElementCache","constructor","Object","debug","initialOffset","overscan","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","horizontal","getItemKey","rangeExtractor","enableSmoothScroll","onChange","initialRect","memo","min","measurements","key","measuredSize","size","index","calculateRange","scrollOffset","count","makeMeasureElement","item","measuredItemSize","itemSize","virtualItems","currentMeasureElements","k","len","indexes","measurement","align","attempt","offset","toOffset","requestAnimationFrame","rest","clearTimeout","check","lastOffset","scrollCheckFrame","setTimeout","findNearestBinarySearch","low","middle","currentValue","getCurrentValue","high","startIndex","endIndex"],"mappings":"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","sourcesContent":["var props = [\"bottom\", \"height\", \"left\", \"right\", \"top\", \"width\"];\n\nvar rectChanged = function rectChanged(a, b) {\n  if (a === void 0) {\n    a = {};\n  }\n\n  if (b === void 0) {\n    b = {};\n  }\n\n  return props.some(function (prop) {\n    return a[prop] !== b[prop];\n  });\n};\n\nvar observedNodes = /*#__PURE__*/new Map();\nvar rafId;\n\nvar run = function run() {\n  var changedStates = [];\n  observedNodes.forEach(function (state, node) {\n    var newRect = node.getBoundingClientRect();\n\n    if (rectChanged(newRect, state.rect)) {\n      state.rect = newRect;\n      changedStates.push(state);\n    }\n  });\n  changedStates.forEach(function (state) {\n    state.callbacks.forEach(function (cb) {\n      return cb(state.rect);\n    });\n  });\n  rafId = window.requestAnimationFrame(run);\n};\n\nfunction observeRect(node, cb) {\n  return {\n    observe: function observe() {\n      var wasEmpty = observedNodes.size === 0;\n\n      if (observedNodes.has(node)) {\n        observedNodes.get(node).callbacks.push(cb);\n      } else {\n        observedNodes.set(node, {\n          rect: undefined,\n          hasRectChanged: false,\n          callbacks: [cb]\n        });\n      }\n\n      if (wasEmpty) run();\n    },\n    unobserve: function unobserve() {\n      var state = observedNodes.get(node);\n\n      if (state) {\n        // Remove the callback\n        var index = state.callbacks.indexOf(cb);\n        if (index >= 0) state.callbacks.splice(index, 1); // Remove the node reference\n\n        if (!state.callbacks.length) observedNodes[\"delete\"](node); // Stop the loop\n\n        if (!observedNodes.size) cancelAnimationFrame(rafId);\n      }\n    }\n  };\n}\n\nexport default observeRect;\n//# sourceMappingURL=observe-rect.esm.js.map\n","export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  },\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    return result!\n  }\n}\n","import observeRect from '@reach/observe-rect'\nimport { memo } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\nexport interface ScrollToOptions {\n  align: ScrollAlignment\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\ninterface Item {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\nexport interface VirtualItem<TItemElement> extends Item {\n  measureElement: (el: TItemElement | null) => void\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nconst memoRectCallback = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  let prev: Rect = { height: -1, width: -1 }\n\n  return (rect: Rect) => {\n    if (\n      instance.options.horizontal\n        ? rect.width !== prev.width\n        : rect.height !== prev.height\n    ) {\n      cb(rect)\n    }\n\n    prev = rect\n  }\n}\n\nexport const observeElementRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const onResize = memoRectCallback(instance, cb)\n\n  const observer = observeRect(instance.scrollElement as Element, (rect) => {\n    onResize(rect)\n  })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  onResize(instance.scrollElement.getBoundingClientRect())\n\n  observer.observe()\n\n  return () => {\n    observer.unobserve()\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const memoizedCallback = memoRectCallback(instance, cb)\n  const onResize = () =>\n    memoizedCallback({\n      width: instance.scrollElement.innerWidth,\n      height: instance.scrollElement.innerHeight,\n    })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  onResize()\n\n  instance.scrollElement.addEventListener('resize', onResize, {\n    capture: false,\n    passive: true,\n  })\n\n  return () => {\n    instance.scrollElement.removeEventListener('resize', onResize)\n  }\n}\n\ntype ObserverMode = 'element' | 'window'\n\nconst scrollProps = {\n  element: ['scrollLeft', 'scrollTop'],\n  window: ['scrollX', 'scrollY'],\n} as const\n\nconst createOffsetObserver = (mode: ObserverMode) => {\n  return (instance: Virtualizer<any, any>, cb: (offset: number) => void) => {\n    if (!instance.scrollElement) {\n      return\n    }\n\n    const propX = scrollProps[mode][0]\n    const propY = scrollProps[mode][1]\n\n    let prevX: number = instance.scrollElement[propX]\n    let prevY: number = instance.scrollElement[propY]\n\n    const scroll = () => {\n      cb(instance.scrollElement[instance.options.horizontal ? propX : propY])\n    }\n\n    scroll()\n\n    const onScroll = (e: Event) => {\n      const target = e.currentTarget as HTMLElement & Window\n      const scrollX = target[propX]\n      const scrollY = target[propY]\n\n      if (instance.options.horizontal ? prevX - scrollX : prevY - scrollY) {\n        scroll()\n      }\n\n      prevX = scrollX\n      prevY = scrollY\n    }\n\n    instance.scrollElement.addEventListener('scroll', onScroll, {\n      capture: false,\n      passive: true,\n    })\n\n    return () => {\n      instance.scrollElement.removeEventListener('scroll', onScroll)\n    }\n  }\n}\n\nexport const observeElementOffset = createOffsetObserver('element')\nexport const observeWindowOffset = createOffsetObserver('window')\n\nexport const measureElement = (\n  element: unknown,\n  instance: Virtualizer<any, any>,\n) => {\n  return (element as Element).getBoundingClientRect()[\n    instance.options.horizontal ? 'width' : 'height'\n  ]\n}\n\nexport const windowScroll = (\n  offset: number,\n  canSmooth: boolean,\n  instance: Virtualizer<any, any>,\n) => {\n  ;(instance.scrollElement as Window)?.scrollTo({\n    [instance.options.horizontal ? 'left' : 'top']: offset,\n    behavior: canSmooth ? 'smooth' : undefined,\n  })\n}\n\nexport const elementScroll = (\n  offset: number,\n  canSmooth: boolean,\n  instance: Virtualizer<any, any>,\n) => {\n  ;(instance.scrollElement as Element)?.scrollTo({\n    [instance.options.horizontal ? 'left' : 'top']: offset,\n    behavior: canSmooth ? 'smooth' : undefined,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement = unknown,\n  TItemElement = unknown,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    canSmooth: boolean,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    el: TItemElement,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  enableSmoothScroll?: boolean\n}\n\nexport class Virtualizer<TScrollElement = unknown, TItemElement = unknown> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  private measurementsCache: Item[] = []\n  private itemMeasurementsCache: Record<Key, number> = {}\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  private scrollOffset: number\n  private destinationOffset: undefined | number\n  private scrollCheckFrame!: ReturnType<typeof setTimeout>\n  private measureElementCache: Record<\n    number,\n    (measurableItem: TItemElement | null) => void\n  > = {}\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      enableSmoothScroll: true,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.notify()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollOffset = offset\n          this.notify()\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurements = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.getItemKey,\n      this.itemMeasurementsCache,\n    ],\n    (count, paddingStart, getItemKey, measurementsCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n        const measuredSize = measurementsCache[key]\n        const start = measurements[i - 1]\n          ? measurements[i - 1]!.end\n          : paddingStart\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n        const end = start + size\n        measurements[i] = { index: i, start, size, end, key }\n      }\n\n      this.measurementsCache = measurements\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV === 'development' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      })\n    },\n    {\n      key: process.env.NODE_ENV === 'development' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count: count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV === 'development' && 'getIndexes',\n    },\n  )\n\n  getVirtualItems = memo(\n    () => [\n      this.getIndexes(),\n      this.getMeasurements(),\n      this.options.measureElement,\n    ],\n    (indexes, measurements, measureElement) => {\n      const makeMeasureElement =\n        (index: number) => (measurableItem: TItemElement | null) => {\n          const item = this.measurementsCache[index]!\n\n          if (!measurableItem) {\n            return\n          }\n\n          const measuredItemSize = measureElement(measurableItem, this)\n          const itemSize = this.itemMeasurementsCache[item.key] ?? item.size\n\n          if (measuredItemSize !== itemSize) {\n            if (item.start < this.scrollOffset) {\n              if (\n                process.env.NODE_ENV === 'development' &&\n                this.options.debug\n              ) {\n                console.info('correction', measuredItemSize - itemSize)\n              }\n\n              if (!this.destinationOffset) {\n                this._scrollToOffset(\n                  this.scrollOffset + (measuredItemSize - itemSize),\n                  false,\n                )\n              }\n            }\n\n            this.pendingMeasuredCacheIndexes.push(index)\n            this.itemMeasurementsCache = {\n              ...this.itemMeasurementsCache,\n              [item.key]: measuredItemSize,\n            }\n            this.notify()\n          }\n        }\n\n      const virtualItems: VirtualItem<TItemElement>[] = []\n\n      const currentMeasureElements: typeof this.measureElementCache = {}\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        const item = {\n          ...measurement,\n          measureElement: (currentMeasureElements[i] =\n            this.measureElementCache[i] ?? makeMeasureElement(i)),\n        }\n        virtualItems.push(item)\n      }\n\n      this.measureElementCache = currentMeasureElements\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV === 'development' && 'getIndexes',\n    },\n  )\n\n  scrollToOffset = (\n    toOffset: number,\n    { align }: ScrollToOffsetOptions = { align: 'start' },\n  ) => {\n    const attempt = () => {\n      const offset = this.scrollOffset\n      const size = this.getSize()\n\n      if (align === 'auto') {\n        if (toOffset <= offset) {\n          align = 'start'\n        } else if (toOffset >= offset + size) {\n          align = 'end'\n        } else {\n          align = 'start'\n        }\n      }\n\n      if (align === 'start') {\n        this._scrollToOffset(toOffset, true)\n      } else if (align === 'end') {\n        this._scrollToOffset(toOffset - size, true)\n      } else if (align === 'center') {\n        this._scrollToOffset(toOffset - size / 2, true)\n      }\n    }\n\n    attempt()\n    requestAnimationFrame(() => {\n      attempt()\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align, ...rest }: ScrollToIndexOptions = { align: 'auto' },\n  ) => {\n    const measurements = this.getMeasurements()\n    const offset = this.scrollOffset\n    const size = this.getSize()\n    const { count } = this.options\n\n    const measurement = measurements[Math.max(0, Math.min(index, count - 1))]\n\n    if (!measurement) {\n      return\n    }\n\n    if (align === 'auto') {\n      if (measurement.end >= offset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        offset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    this.scrollToOffset(toOffset, { align, ...rest })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) + this.options.paddingEnd\n\n  private _scrollToOffset = (offset: number, canSmooth: boolean) => {\n    clearTimeout(this.scrollCheckFrame)\n\n    this.destinationOffset = offset\n    this.options.scrollToFn(\n      offset,\n      this.options.enableSmoothScroll && canSmooth,\n      this,\n    )\n\n    let scrollCheckFrame: ReturnType<typeof setTimeout>\n\n    const check = () => {\n      let lastOffset = this.scrollOffset\n      this.scrollCheckFrame = scrollCheckFrame = setTimeout(() => {\n        if (this.scrollCheckFrame !== scrollCheckFrame) {\n          return\n        }\n\n        if (this.scrollOffset === lastOffset) {\n          this.destinationOffset = undefined\n          return\n        }\n        lastOffset = this.scrollOffset\n        check()\n      }, 100)\n    }\n\n    check()\n  }\n\n  measure = () => {\n    this.itemMeasurementsCache = {}\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: Item[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"]}